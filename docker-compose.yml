version: '3.8'

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ticket-app
    restart: unless-stopped
    working_dir: /var/www/
    volumes:
      - ./:/var/www
    environment:
      DB_CONNECTION: mysql
      DB_HOST: ticket-db
      DB_PORT: 3306
      DB_DATABASE: ${DB_DATABASE:-ticket_system}
      DB_USERNAME: ${DB_USERNAME:-ticket}
      DB_PASSWORD: ${DB_PASSWORD:-root}
    depends_on:
      - ticket-db
    networks:
      - ticket-network

  nginx:
    image: nginx:alpine
    container_name: ticket-nginx
    restart: unless-stopped
    ports:
      - "8000:80"
    volumes:
      - ./:/var/www
      - ./nginx/conf.d:/etc/nginx/conf.d/
    networks:
      - ticket-network

  ticket-db:
    image: mysql:8.0
    container_name: ticket-db
    restart: unless-stopped
    environment:
      MYSQL_DATABASE: ${DB_DATABASE:-ticket_system}
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD:-root}
      MYSQL_ALLOW_EMPTY_PASSWORD: "yes"
      # MYSQL_PASSWORD: ${DB_PASSWORD:-root}
      # MYSQL_USER: ${DB_USERNAME:-ticket}
      SERVICE_TAGS: dev
      SERVICE_NAME: mysql
    volumes:
      - ./docker/mysql:/var/lib/mysql
    ports:
      - "3307:3306"
    networks:
      - ticket-network
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${DB_PASSWORD:-root}", "--silent" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  node:
    image: node:20-alpine
    container_name: ticket-node
    restart: unless-stopped
    working_dir: /var/www
    volumes:
      - ./:/var/www
    command: sh -c "npm install && npm run dev"
    networks:
      - ticket-network

networks:
  ticket-network:
    driver: bridge
